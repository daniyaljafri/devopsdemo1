name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  deploy:
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Download artifact
      uses: actions/github-script@v7
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
             owner: context.repo.owner,
             repo: context.repo.repo,
             run_id: context.payload.workflow_run.id,
          });
          let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "website-files"
          })[0];
          let download = await github.rest.actions.downloadArtifact({
             owner: context.repo.owner,
             repo: context.repo.repo,
             artifact_id: matchArtifact.id,
             archive_format: 'zip',
          });
          let fs = require('fs');
          fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/website.zip`, Buffer.from(download.data));
    
    - name: Deploy Express.js app
      shell: powershell
      run: |
        # Setup deployment directory
        $deployPath = "C:\deploy\website"
        Remove-Item -Path $deployPath -Recurse -Force -ErrorAction SilentlyContinue
        New-Item -ItemType Directory -Force -Path $deployPath
        
        # Extract and find app directory
        Write-Host "Extracting website.zip..."
        
        # Try different extraction methods
        try {
          # Method 1: PowerShell Expand-Archive
          Expand-Archive -Path "website.zip" -DestinationPath $deployPath -Force
          Write-Host "‚úÖ Extraction completed with Expand-Archive"
        } catch {
          Write-Host "‚ö†Ô∏è Expand-Archive failed, trying alternative method..."
          
          # Method 2: Use .NET compression
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::ExtractToDirectory("$PWD\website.zip", $deployPath)
          Write-Host "‚úÖ Extraction completed with .NET compression"
        }
        
        # Check what was extracted
        Write-Host "Contents after extraction:"
        Get-ChildItem $deployPath -Recurse
        
        # Find the directory containing package.json
        $packageJson = Get-ChildItem -Path $deployPath -Filter "package.json" -Recurse -File | Select-Object -First 1
        if (-not $packageJson) {
          Write-Host "‚ùå package.json not found in extracted files"
          Get-ChildItem $deployPath -Recurse
          exit 1
        }
        
        $appDir = $packageJson.DirectoryName
        Write-Host "Found app in: $appDir"
        
        # Install dependencies
        Set-Location $appDir
        Write-Host "Installing dependencies..."
        npm install
        
        # Stop existing PM2 app
        pm2 delete hello-world -s 2>$null
        
        # Start new app
        Write-Host "Starting Express.js app with PM2..."
        pm2 start index.js --name hello-world
        pm2 save
        
        # Verify deployment
        Start-Sleep -Seconds 5
        try {
          Invoke-WebRequest -Uri "http://localhost:3000" -UseBasicParsing -TimeoutSec 10
          Write-Host "‚úÖ Express.js app deployed successfully!"
          Write-Host "üåê Access at: http://localhost:3000"
          pm2 status
        } catch {
          Write-Host "‚ö†Ô∏è App started but may need more time"
          pm2 logs hello-world --lines 5
          pm2 status
        }