name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  deploy:
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Download artifact
      uses: actions/github-script@v7
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
             owner: context.repo.owner,
             repo: context.repo.repo,
             run_id: context.payload.workflow_run.id,
          });
          let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "website-files"
          })[0];
          let download = await github.rest.actions.downloadArtifact({
             owner: context.repo.owner,
             repo: context.repo.repo,
             artifact_id: matchArtifact.id,
             archive_format: 'zip',
          });
          let fs = require('fs');
          fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/website.zip`, Buffer.from(download.data));
    
    - name: Extract and deploy
      shell: powershell
      run: |
        # Clean and create deployment directory
        Remove-Item -Path "C:\deploy\website" -Recurse -Force -ErrorAction SilentlyContinue
        New-Item -ItemType Directory -Force -Path "C:\deploy\website"
        
        # Check zip file before extraction
        Write-Host "Checking zip file before extraction..."
        if (Test-Path "website.zip") {
          $zipSize = (Get-Item "website.zip").Length
          Write-Host "Zip file size: $zipSize bytes"
          
          # Try to list contents of zip without extracting
          try {
            $zipContents = [System.IO.Compression.ZipFile]::OpenRead("website.zip").Entries | Select-Object Name, Length
            Write-Host "Zip contents:"
            $zipContents | ForEach-Object { Write-Host "  $($_.Name) ($($_.Length) bytes)" }
          } catch {
            Write-Host "⚠️ Could not read zip contents: $($_.Exception.Message)"
          }
        } else {
          Write-Host "❌ website.zip not found!"
          exit 1
        }
        
        # Extract files
        Write-Host "Extracting website.zip..."
        try {
          Expand-Archive -Path "website.zip" -DestinationPath "C:\deploy\website" -Force
          Write-Host "✅ Extraction completed"
        } catch {
          Write-Host "❌ Extraction failed: $($_.Exception.Message)"
          exit 1
        }
        
        # Navigate to app directory (find package.json anywhere under deploy dir)
        $pkg = Get-ChildItem -Path "C:\deploy\website" -Filter package.json -Recurse -File | Select-Object -First 1
        if ($pkg) {
          Set-Location $pkg.DirectoryName
          Write-Host "Using app directory: $($pkg.DirectoryName)"
        } else {
          Write-Host "❌ package.json not found under C:\deploy\website"
          Write-Host "Directory tree:"
          Get-ChildItem "C:\deploy\website" -Recurse
          exit 1
        }
        
        # Install dependencies
        npm install
    
    - name: Start app with PM2
      shell: powershell
      run: |
        # Stop existing app (ignore errors)
        pm2 delete hello-world -s 2>$null
        
        # Navigate to app directory (find package.json anywhere under deploy dir)
        $pkg = Get-ChildItem -Path "C:\deploy\website" -Filter package.json -Recurse -File | Select-Object -First 1
        if ($pkg) {
          Set-Location $pkg.DirectoryName
          Write-Host "Using app directory: $($pkg.DirectoryName)"
        } else {
          Write-Host "❌ package.json not found under C:\deploy\website"
          Write-Host "Directory tree:"
          Get-ChildItem "C:\deploy\website" -Recurse
          exit 1
        }
        
        # Start new app
        # Prefer npm script if present; fallback to node index.js
        if ((Get-Content package.json | Out-String) -match '"start"\s*:\s*"') {
          pm2 start npm --name hello-world -- start
        } elseif (Test-Path "index.js") {
          pm2 start index.js --name hello-world
        } else {
          Write-Host "❌ Neither npm start nor index.js found."
          exit 1
        }
        pm2 save
        
        # Quick health check
        Start-Sleep -Seconds 5
        try {
          Invoke-WebRequest -Uri "http://localhost:3000" -UseBasicParsing -TimeoutSec 10
          Write-Host "✅ App deployed successfully at http://localhost:3000"
        } catch {
          Write-Host "⚠️ App started but may need more time to be ready"
          pm2 status
        }